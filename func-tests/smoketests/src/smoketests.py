import requests
import mimetypes
import tempfile
import os
import json
from requests.auth import HTTPBasicAuth
import file_helper

import time

BASE_REST_URL = os.environ.get('CONFLUENCE_BASE_URL', "http://localhost:8090/confluence")
password = os.environ.get('CONFLUENCE_USER_PWD', 'admin')
user = os.environ.get('CONFLUENCE_USER', 'admin')
auth=HTTPBasicAuth(user, password)


def create_space(spaceKey):
	print("   - Create Space", end='')
	url = f"{BASE_REST_URL}/rest/api/space"

	data = {
				"key": spaceKey,
				"name": "Test new space",
				"description": {
					"plain": {
						"value": "test space generated by api for smoketest",
						"representation": "plain"
					}
				},
				"metadata": {}
			}
	headers = {'Content-Type': 'application/json'}

	r = requests.post(url, data=json.dumps(data), headers=headers, auth=auth)
	assert r.status_code == 200 , f'failed to create space {spaceKey}! status:{r.status_code}'

	spaceKey = None
	if r.status_code == 200:
		print("...............passed")
	return spaceKey


def create_content(spaceKey, title):
	print("   - Create Content", end='')
	url = f"{BASE_REST_URL}/rest/api/content"
	data = {
			"type": "page",
			"status": "current",
			"title": title,
			"space": {"key":spaceKey},
			"representation":"storage",
			"body": 
				{
				"storage":
					{
					"value": "<p>This page is created for smoketest!</p>",
					"representation":"storage"
					}
				} 
			}
	headers = {'Content-Type': 'application/json'}

	r = requests.post(url, data=json.dumps(data), headers=headers, auth=auth)
	assert r.status_code == 200 , f'failed to create page "{title}"! status:{r.status_code}'

	content_id = None
	if r.status_code == 200:
		result = json.loads(r.text)
		content_id = result['id']
		print(".............passed")
		time.sleep(3) # 2 seconds delay to allow index get updated
	return content_id


def view_content(content_id):
	print("   - View Content", end='')
	url = f"{BASE_REST_URL}/rest/api/content/{content_id}?expand=body.view"
	r = requests.get(url, auth=auth)
	assert r.status_code == 200 , f'failed to view the page! status:{r.status_code}'

	if r.status_code==200:
		if len(json.loads(r.text)['body']['view']['value'])>0:
			print("...............passed")
			return True
	return False

def search_content(title):
	print("   - Search Content", end='')
	url = f"{BASE_REST_URL}/rest/api/content/search?cql=text~smoketest"
	r = requests.get(url, auth=auth)
	assert r.status_code == 200 , f'failed to search content! status:{r.status_code}'


	if r.status_code==200:
		if len(json.loads(r.text)['results'])==0: # index update may needs more time
			time.sleep(2)
			r = requests.get(url, auth=auth)
		if len(json.loads(r.text)['results'])>0:
			print(".............passed")
			return True
	return False


# TODO: implement the test
def edit_content(content_id):
	print("   - Edit Content", end='')
	url = f"{BASE_REST_URL}/rest/api/content"
	if True :# r.status_code == 200:
		print("...............passed")

def add_attachments(content_id):
	print("   - Add Attachment", end='')
	url = f"{BASE_REST_URL}/rest/api/content/{content_id}/child/attachment"
	headers = {'X-Atlassian-Token': 'no-check'} #no content-type here!

	# provide content-type explicitly
	files = file_helper.create_temp_files()
	auth = HTTPBasicAuth('admin', password)
	r = requests.post(url, headers=headers, files=files, auth=auth)
	assert r.status_code == 200 , f'failed to upload the attachment! status:{r.status_code}'

	if r.status_code == 200:
		print(".............passed")
	file_helper.remove_temp_files(files)
	return r.status_code == 200


# TODO: implement the test
def retrieve_attachment(content_id, attachment_id):
	print("   - Download Attachment", end='')
	url = f"{BASE_REST_URL}/rest/api/content/{content_id}/child/attachment"
	if True :# r.status_code == 200:
		print("........passed")

# TODO: implement the test
def delete_attachment(content_id, attachment_id):
	print("   - Delete Attachment", end='')
	url = f"{BASE_REST_URL}/rest/api/content/{content_id}/child/attachment"
	if True :# r.status_code == 200:
		print("..........passed")

def delete_content(content_id):
	print("   - Delete Content", end='')
	url = f"{BASE_REST_URL}/rest/api/content/{content_id}"
	r = requests.delete(url, auth=auth)	
	# returns 200(trash) or 204(purge) on success and 404 or 409 if failed
	succeed = r.status_code == 200 or r.status_code == 204
	assert r.status_code == 200 or r.status_code == 204 , f'failed to delete the page! status:{r.status_code}'

	if succeed:
		print(".............passed")

	return succeed


def delete_space(spaceKey):
	print("   - Delete Space", end='')
	url = f"{BASE_REST_URL}/rest/api/space/{spaceKey}"
	r = requests.delete(url, auth=auth)	# returns 202 on success and 404 if failed
	assert r.status_code == 202 , f'failed to delete the space! status:{r.status_code}'

	if r.status_code == 202:
		print("...............passed")
	return r.status_code == 202


if __name__ == '__main__':
	print('*** SMOKE TESTS ***')
	space_key='testspace01'
	title='second page'

	create_space(space_key)
	content_id=create_content(space_key, title)
	view_content(content_id)
	search_content(title)
	edit_content(content_id)
	attachment_id=add_attachments(content_id)
	delete_attachment(content_id, attachment_id)
	delete_content(content_id)
	delete_space(space_key)

	print('')
	print('*** All tests passed!')